import _ from 'lodash';

import csvs from './csvs';

const OUTPUT_DIRECTORY = '/path/to/output';

export const projectFixture = {
  analysisHorizon: 0,
  analysisHorizonMode: '1',
  daGrowth: 0,
  dataYear: 2017,
  deferralPlannedLoadLimit: 4000,
  deferralReversePowerFlowLimit: -1000,
  deferralGrowth: 2,
  deferralPrice: 0,
  externalIncentives: [
    {
      id: '1',
      year: 2017,
      taxCredit: 300,
      otherIncentive: 100,
    },
    {
      id: '2',
      year: 2018,
      taxCredit: 200,
      otherIncentive: 100,
    },
  ],
  financeDiscountRate: 7,
  financeFederalTaxRate: 3,
  financeInflationRate: 3,
  financePropertyTaxRate: 3,
  financeStateTaxRate: 3,
  mtsBackupEnergyPrice: [],
  mtsBackupEnergyReservation: [],
  mtsDrCapacityPrice: [],
  mtsDrCapacityReservation: [],
  mtsDrEnergyPrice: [],
  mtsRaCapacityPrice: [],
  tsControllableLoadProfile: [],
  tsCriticalLoad: csvs.siteLoad, // note: using hardcoded site load
  tsDaPrice: csvs.daPrice,
  tsDeferralLoad: csvs.deferralLoad,
  tsLfEOU: [],
  tsLfEOD: [],
  tsLfPrice: [],
  tsLfUpPrice: [],
  tsLfDownPrice: [],
  tsFrPrice: csvs.price,
  tsFrUpPrice: csvs.price,
  tsFrDownPrice: csvs.price,
  tsNsrPrice: csvs.price,
  tsSiteLoad: [],
  tsSrPrice: csvs.price,
  tsSystemLoad: [],
  tsRaActive: [],
  tsUserEnergyMax: _.fill(Array(8760), 9000),
  tsUserEnergyMin: _.fill(Array(8760), 0),
  tsUserPowerExportMax: _.fill(Array(8760), 1900),
  tsUserPowerExportMin: _.fill(Array(8760), -1900),
  gridLocation: 'Customer',
  outputDirectory: OUTPUT_DIRECTORY,
  name: 'None',
  objectivesDA: true,
  siteLoad: null,
  includeSiteLoad: false,
  includeInterconnectionConstraints: false,
  maxImport: -10000,
  maxExport: 40000,
  optimizationHorizon: 'month',
  ownership: 'Customer',
  retailTariffBillingPeriods: [
    {
      id: 1,
      values: {
        startMonth: 1,
        endMonth: 5,
        startTime: 1,
        endTime: 24,
        excludingStartTime: null,
        excludingEndTime: null,
        weekday: 2,
        value: 0.05323,
        chargeType: 'Energy',
        name: '',
      },
    },
    {
      id: 2,
      values: {
        startMonth: 1,
        endMonth: 5,
        startTime: 1,
        endTime: 24,
        excludingStartTime: null,
        excludingEndTime: null,
        weekday: 2,
        value: 19.32,
        chargeType: 'Demand',
        name: '',
      },
    },
    {
      id: 3,
      values: {
        startMonth: 6,
        endMonth: 9,
        startTime: 1,
        endTime: 24,
        excludingStartTime: null,
        excludingEndTime: null,
        weekday: 2,
        value: 0.05668,
        chargeType: 'Energy',
        name: '',
      },
    },
    {
      id: 4,
      values: {
        startMonth: 6,
        endMonth: 9,
        startTime: 1,
        endTime: 24,
        excludingStartTime: null,
        excludingEndTime: null,
        weekday: 2,
        value: 7.08,
        chargeType: 'Demand',
        name: '',
      },
    },
    {
      id: 5,
      values: {
        startMonth: 10,
        endMonth: 12,
        startTime: 1,
        endTime: 24,
        excludingStartTime: null,
        excludingEndTime: null,
        weekday: 2,
        value: 0.05323,
        chargeType: 'Energy',
        name: '',
      },
    },
    {
      id: 6,
      values: {
        startMonth: 10,
        endMonth: 12,
        startTime: 1,
        endTime: 24,
        excludingStartTime: null,
        excludingEndTime: null,
        weekday: 2,
        value: 30.5,
        chargeType: 'Demand',
        name: '',
      },
    },
  ],
  startYear: '2017',
  technologySpecsSolarPV: [],
  technologySpecsICE: [],
  technologySpecsBattery: [{
    active: true,
    id: '',
    values: {
      auxiliaryLoad: 0,
      calendarDegradationRate: 0,
      capitalCost: 0,
      capitalCostPerkW: 100,
      capitalCostPerkWh: 800,
      chargingCapacity: 1000,
      constructionYear: 2017,
      dailyCycleLimit: 1,
      dischargingCapacity: 1000,
      decomissioningCost: 0,
      energyCapacity: 2000,
      energyCapacityMaximum: null,
      energyCapacityMinimum: null,
      expectedLifetime: 99,
      fixedOMCosts: 1000,
      name: 'Battery',
      includeAuxiliaryLoad: false,
      includeCycleDegradation: false,
      includeSizeLimits: false,
      isReplaceable: false,
      lowerSOCLimit: 0,
      macrsTerm: 3,
      maxDuration: 0,
      operationYear: 2017,
      powerCapacity: 0,
      powerCapacityMaximum: null,
      powerCapacityMinimum: null,
      replacementConstructionTime: 1,
      replacementCost: 0,
      replacementCostPerkW: 100,
      replacementCostPerkWh: 800,
      roundtripEfficiency: 85,
      salvageValue: 0,
      salvageValueOption: 'User defined',
      selfDischargeRate: 0,
      shouldDiffChargeDischarge: true,
      shouldEnergySize: false,
      shouldLimitDailyCycling: false,
      shouldMaxDuration: false,
      shouldPowerSize: false,
      stateOfHealth: null,
      targetSOC: 50,
      ter: 7,
      upperSOCLimit: 100,
      variableOMCosts: 0,
    },
  }],
  technologySpecsDieselGen: [],
  timestep: 60,
};

export const getProjectFixture = (inputsDir, resultsDir) => {
  const res = _.cloneDeep(projectFixture);
  res.inputsDirectory = inputsDir;
  res.resultsDirectory = resultsDir;
  return res;
};
